/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as TryImport } from './routes/try'
import { Route as TodosImport } from './routes/todos'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PostsImport } from './routes/posts'
import { Route as NewRouteImport } from './routes/new-route'
import { Route as NewAirdropForClaimImport } from './routes/new-airdrop-for-claim'
import { Route as MultiWalletTransactionImport } from './routes/multi-wallet-transaction'
import { Route as FeedImport } from './routes/feed'
import { Route as DeferredImport } from './routes/deferred'
import { Route as ClaimAirdropImport } from './routes/claim-airdrop'
import { Route as ChatImport } from './routes/chat'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as TasksAppImport } from './routes/tasks/app'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as ExploreAppImport } from './routes/explore/app'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const TryRoute = TryImport.update({
  path: '/try',
  getParentRoute: () => rootRoute,
} as any)

const TodosRoute = TodosImport.update({
  path: '/todos',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const NewRouteRoute = NewRouteImport.update({
  path: '/new-route',
  getParentRoute: () => rootRoute,
} as any)

const NewAirdropForClaimRoute = NewAirdropForClaimImport.update({
  path: '/new-airdrop-for-claim',
  getParentRoute: () => rootRoute,
} as any)

const MultiWalletTransactionRoute = MultiWalletTransactionImport.update({
  path: '/multi-wallet-transaction',
  getParentRoute: () => rootRoute,
} as any)

const FeedRoute = FeedImport.update({
  path: '/feed',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const ClaimAirdropRoute = ClaimAirdropImport.update({
  path: '/claim-airdrop',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  path: '/',
  getParentRoute: () => UsersRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  path: '/$userId',
  getParentRoute: () => UsersRoute,
} as any)

const TasksAppRoute = TasksAppImport.update({
  path: '/tasks/app',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const ExploreAppRoute = ExploreAppImport.update({
  path: '/explore/app',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/claim-airdrop': {
      id: '/claim-airdrop'
      path: '/claim-airdrop'
      fullPath: '/claim-airdrop'
      preLoaderRoute: typeof ClaimAirdropImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/feed': {
      id: '/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof FeedImport
      parentRoute: typeof rootRoute
    }
    '/multi-wallet-transaction': {
      id: '/multi-wallet-transaction'
      path: '/multi-wallet-transaction'
      fullPath: '/multi-wallet-transaction'
      preLoaderRoute: typeof MultiWalletTransactionImport
      parentRoute: typeof rootRoute
    }
    '/new-airdrop-for-claim': {
      id: '/new-airdrop-for-claim'
      path: '/new-airdrop-for-claim'
      fullPath: '/new-airdrop-for-claim'
      preLoaderRoute: typeof NewAirdropForClaimImport
      parentRoute: typeof rootRoute
    }
    '/new-route': {
      id: '/new-route'
      path: '/new-route'
      fullPath: '/new-route'
      preLoaderRoute: typeof NewRouteImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosImport
      parentRoute: typeof rootRoute
    }
    '/try': {
      id: '/try'
      path: '/try'
      fullPath: '/try'
      preLoaderRoute: typeof TryImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/explore/app': {
      id: '/explore/app'
      path: '/explore/app'
      fullPath: '/explore/app'
      preLoaderRoute: typeof ExploreAppImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/tasks/app': {
      id: '/tasks/app'
      path: '/tasks/app'
      fullPath: '/tasks/app'
      preLoaderRoute: typeof TasksAppImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersImport
    }
    '/posts/$postId/deep': {
      id: '/posts/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/chat': typeof ChatRoute
  '/claim-airdrop': typeof ClaimAirdropRoute
  '/deferred': typeof DeferredRoute
  '/feed': typeof FeedRoute
  '/multi-wallet-transaction': typeof MultiWalletTransactionRoute
  '/new-airdrop-for-claim': typeof NewAirdropForClaimRoute
  '/new-route': typeof NewRouteRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/todos': typeof TodosRoute
  '/try': typeof TryRoute
  '/users': typeof UsersRouteWithChildren
  '/explore/app': typeof ExploreAppRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/tasks/app': typeof TasksAppRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/chat': typeof ChatRoute
  '/claim-airdrop': typeof ClaimAirdropRoute
  '/deferred': typeof DeferredRoute
  '/feed': typeof FeedRoute
  '/multi-wallet-transaction': typeof MultiWalletTransactionRoute
  '/new-airdrop-for-claim': typeof NewAirdropForClaimRoute
  '/new-route': typeof NewRouteRoute
  '/redirect': typeof RedirectRoute
  '/todos': typeof TodosRoute
  '/try': typeof TryRoute
  '/explore/app': typeof ExploreAppRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/tasks/app': typeof TasksAppRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRoute
  '/chat': typeof ChatRoute
  '/claim-airdrop': typeof ClaimAirdropRoute
  '/deferred': typeof DeferredRoute
  '/feed': typeof FeedRoute
  '/multi-wallet-transaction': typeof MultiWalletTransactionRoute
  '/new-airdrop-for-claim': typeof NewAirdropForClaimRoute
  '/new-route': typeof NewRouteRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/todos': typeof TodosRoute
  '/try': typeof TryRoute
  '/users': typeof UsersRouteWithChildren
  '/explore/app': typeof ExploreAppRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/tasks/app': typeof TasksAppRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/chat'
    | '/claim-airdrop'
    | '/deferred'
    | '/feed'
    | '/multi-wallet-transaction'
    | '/new-airdrop-for-claim'
    | '/new-route'
    | '/posts'
    | '/redirect'
    | '/todos'
    | '/try'
    | '/users'
    | '/explore/app'
    | '/posts/$postId'
    | '/tasks/app'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/chat'
    | '/claim-airdrop'
    | '/deferred'
    | '/feed'
    | '/multi-wallet-transaction'
    | '/new-airdrop-for-claim'
    | '/new-route'
    | '/redirect'
    | '/todos'
    | '/try'
    | '/explore/app'
    | '/posts/$postId'
    | '/tasks/app'
    | '/users/$userId'
    | '/posts'
    | '/users'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/chat'
    | '/claim-airdrop'
    | '/deferred'
    | '/feed'
    | '/multi-wallet-transaction'
    | '/new-airdrop-for-claim'
    | '/new-route'
    | '/posts'
    | '/redirect'
    | '/todos'
    | '/try'
    | '/users'
    | '/explore/app'
    | '/posts/$postId'
    | '/tasks/app'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRoute
  ChatRoute: typeof ChatRoute
  ClaimAirdropRoute: typeof ClaimAirdropRoute
  DeferredRoute: typeof DeferredRoute
  FeedRoute: typeof FeedRoute
  MultiWalletTransactionRoute: typeof MultiWalletTransactionRoute
  NewAirdropForClaimRoute: typeof NewAirdropForClaimRoute
  NewRouteRoute: typeof NewRouteRoute
  PostsRoute: typeof PostsRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  TodosRoute: typeof TodosRoute
  TryRoute: typeof TryRoute
  UsersRoute: typeof UsersRouteWithChildren
  ExploreAppRoute: typeof ExploreAppRoute
  TasksAppRoute: typeof TasksAppRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRoute,
  ChatRoute: ChatRoute,
  ClaimAirdropRoute: ClaimAirdropRoute,
  DeferredRoute: DeferredRoute,
  FeedRoute: FeedRoute,
  MultiWalletTransactionRoute: MultiWalletTransactionRoute,
  NewAirdropForClaimRoute: NewAirdropForClaimRoute,
  NewRouteRoute: NewRouteRoute,
  PostsRoute: PostsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  TodosRoute: TodosRoute,
  TryRoute: TryRoute,
  UsersRoute: UsersRouteWithChildren,
  ExploreAppRoute: ExploreAppRoute,
  TasksAppRoute: TasksAppRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/chat",
        "/claim-airdrop",
        "/deferred",
        "/feed",
        "/multi-wallet-transaction",
        "/new-airdrop-for-claim",
        "/new-route",
        "/posts",
        "/redirect",
        "/todos",
        "/try",
        "/users",
        "/explore/app",
        "/tasks/app",
        "/posts/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx"
    },
    "/claim-airdrop": {
      "filePath": "claim-airdrop.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/feed": {
      "filePath": "feed.tsx"
    },
    "/multi-wallet-transaction": {
      "filePath": "multi-wallet-transaction.tsx"
    },
    "/new-airdrop-for-claim": {
      "filePath": "new-airdrop-for-claim.tsx"
    },
    "/new-route": {
      "filePath": "new-route.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/todos": {
      "filePath": "todos.tsx"
    },
    "/try": {
      "filePath": "try.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/explore/app": {
      "filePath": "explore/app.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/tasks/app": {
      "filePath": "tasks/app.tsx"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/posts/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
